#       getmean = getmean)
}
cacheSolve <- function(x, ...) {
x_inv <- solve()
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x, ...) {
x_inv <- solve(x)
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x, ...) {
x_inv <- solve(x)
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
x
x_inv
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x) {
x_inv <- solve(x)
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
x
x_inv
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x) {
x_inv <- solve() x
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x) {
x_inv <- solve() x
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x) {
x_inv <- solve()
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
data <- x
x_inv <- solve(data, ...)
#  x$setmean(m)
x_inv
}
x
x_inv
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
#  setmean <- function(mean) m <<- mean
#  getmean <- function() m
#  list(set = set, get = get,
#       setmean = setmean,
#       getmean = getmean)
}
cacheSolve <- function(x) {
x_inv <- solve()
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
z <- c(1,2,3,3,3,)
z <- c(1,2,3,3,3,3)
mean(z)
mean <- z
mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(x_mean) m <<- x_mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cacheSolve <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:15)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
setinverse <- function(whatever) x_inv <<- whatever
getinverse <- function() x_inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
x_inv <- solve()
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
x_inv
x
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
setinverse <- function(whatever) x_inv <<- whatever
getinverse <- function() x_inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
#  x_inv <- solve() # Doesn't work
x_inv < x$getinverse
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
setinverse <- function(whatever) x_inv <<- whatever
getinverse <- function() x_inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
#  x_inv <- solve() # Doesn't work
x_inv < x$getinverse
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
setinverse <- function(whatever) x_inv <<- whatever
getinverse <- function() x_inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
#  x_inv <- solve() # Doesn't work
x_inv <- x$getinverse
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
x
dir()
source("makeCacheMatrix.R")
source("makeCacheMatrix.R")
source("makeCacheMatrix.R")
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
anothermatrix <- makeCacheMatrix(x)
makeCacheMatrix(x)
# The following four lines of code were copied from the Forum
# I used these to test my results
x <- matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {  # Define x as a matrix class
x_inv <- NULL  #x_inv is the inverse of matrix x
set <- function(y) {
x <<- y # This takes the value y and assigns it to x in the parent env.
x_inv <<- NULL # Puts NULL in the value x_inv in the parent env.
}
get <- function() x
setinverse <- function(whatever) x_inv <<- whatever
getinverse <- function() x_inv
#  list(set = set, get = get,
#       setinverse = setinverse,
#       getinverse = getinverse)
}
cacheSolve <- function(x) {
#  x_inv <- solve() # Doesn't work
x_inv <- x$getinverse
if(!is.null(x_inv)) {
message("getting cached inverse")
return(x_inv)
}
x_inv <- solve(x)
#  x$setmean(m)
x_inv
}
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
anothermatrix
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
makeCacheMatrix(x)
anothermatrix <- makeCacheMatrix(x)
invMatrix <-cacheSolve(anotherMatrix)
cacheSolve(anotherMatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
View(a)
View(anothermatrix)
View(a)
View(anothermatrix)
View(anothermatrix)
View(data)
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
anothermatrix
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
source('~/Documents/daddy/r/coursera/makeCacheMatrix.R')
x
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
source('~/.active-rstudio-document')
getwd()
x
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
fork
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd(0)
getwd()
dir()
x <- read.csv("inv_matrix.csv")
x
x <- read.csv("inv_matrix.csv", header = FALSE)
x
anothermatrix <- makeCacheMatrix(x)
cacheSolve(anothermatrix)
setwd("~/Documents/daddy/r/coursera/r_hw4_rankall")
source('~/Documents/daddy/r/coursera/r_hw4_rankall/best.R')
test1 <- best("TX", "heart attack")
test1 <- best("BB", "heart attack")
test1 <- best("MD", "pneumonia")
source('~/Documents/daddy/r/coursera/r_hw4_rankall/rankhospital.R')
test2 <- rankhospital("TX", "heart failure", 4)
test2 <- rankhospital("MD", "heart attack", "worst")
test2 <- rankhospital("MN", "heart attack", 5000)
source('~/Documents/daddy/r/coursera/r_hw4_rankall/rankhospital.R')
test2 <- rankhospital("MD", "heart attack", "worst")
source('~/Documents/daddy/r/coursera/r_hw4_rankall/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure", "heart failure"), 10)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure", "best"), 10)
test1 <- best("SC", "heart attack")
test1 <- best("NY", "pneumonia")
test1 <- best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, State == "HI")$hospital)
source('~/Documents/daddy/r/coursera/r_hw4_rankall/rankall.R')
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, State == "HI")$Hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ")$Hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, State == "NV")$Hospital)
